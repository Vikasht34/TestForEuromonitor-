/*
Deployment script for TestDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TestDb"
:setvar DefaultFilePrefix "TestDb"
:setvar DefaultDataPath "C:\Users\ax583e\AppData\Local\Microsoft\VisualStudio\SSDT"
:setvar DefaultLogPath "C:\Users\ax583e\AppData\Local\Microsoft\VisualStudio\SSDT"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[GetOverAllCost]...';


GO
CREATE PROCEDURE [dbo].[GetOverAllCost]
	@Distance int,
	@Stair int,
	@CustType int,
	@OverAllCost float OUTPUT 
AS

DECLARE @distanceThreshold int = 50
DECLARE @stairThreshold int = 5
DECLARE @tempOutPut float 

IF EXISTS(Select 1 from dbo.CustomerVarientCost where Id = @CustType)
 BEGIN
   SELECT @OverAllCost = OverAllCost from dbo.CustomerVarientCost where Id = @CustType
 END
ELSE
 BEGIN
    IF(@Distance = 0 AND @Stair = 0)
	 BEGIN
		 SELECT @OverAllCost = (dist.OverAllCost + stair.OverAllCost) 
		 FROM DBO.DistanceVarientBaseCost as dist,DBO.StairsVarientBaseCost as stair WHERE dist.MinDist = 0 and stair.MinStair = 0
     END
    ELSE
	 BEGIN
	   IF( @Distance <= @distanceThreshold and @Stair <= @stairThreshold)
	     BEGIN
		   SELECT @OverAllCost = (dist.OverAllCost + stair.OverAllCost) 
		   FROM DBO.DistanceVarientBaseCost as dist,DBO.StairsVarientBaseCost as stair WHERE dist.MaxDist <= @Distance and stair.MinStair <= @Stair
		 END
      ELSE
	   BEGIN 
	     SELECT @tempOutPut = (dist.OverAllCost + stair.OverAllCost) 
		   FROM DBO.DistanceVarientBaseCost as dist,DBO.StairsVarientBaseCost as stair WHERE dist.MaxDist = @distanceThreshold and stair.MinStair = @stairThreshold

		  SET @tempOutPut = @tempOutPut + ((@Distance - @distanceThreshold)* 0.25) + ((@Stair-@stairThreshold)*2)
		  SELECT @OverAllCost = @tempOutPut
	   END
	 END
 END
RETURN 0
GO
PRINT N'Update complete.';


GO
