//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.DataEntity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TestDbEntities : DbContext
    {
        public TestDbEntities()
            : base("name=TestDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CustomerVarientCost> CustomerVarientCosts { get; set; }
        public virtual DbSet<DistanceVarientBaseCost> DistanceVarientBaseCosts { get; set; }
        public virtual DbSet<StairsVarientBaseCost> StairsVarientBaseCosts { get; set; }
    
        public virtual ObjectResult<Nullable<decimal>> GetOverAllCost(Nullable<int> distance, Nullable<int> stair, Nullable<int> custType)
        {
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(int));
    
            var stairParameter = stair.HasValue ?
                new ObjectParameter("Stair", stair) :
                new ObjectParameter("Stair", typeof(int));
    
            var custTypeParameter = custType.HasValue ?
                new ObjectParameter("CustType", custType) :
                new ObjectParameter("CustType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetOverAllCost", distanceParameter, stairParameter, custTypeParameter);
        }
    }
}
